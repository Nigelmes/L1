// Неформальное определение конвейера - это ряд этапов, связанных между собой каналами, где каждый этап это набор go-рутин выполняющих определенную функцию. На каждом этапе выполняются определенные действия:
// Получить значения с предыдущего этапа.
// Выполняются какие-либо действия над этими значениями. Как правило создаются новые значения.
// Значения отправляются на следующий этап через выходные каналы.
package main

import "fmt"

func sender(nums ...int) <-chan int { // функция которая внутри себя запускает горутину и отправляет данные в канал
	out := make(chan int)
	go func() {
		defer close(out) // после завершения цикла закрываем канал
		for _, n := range nums {
			out <- n //  отправляем в канал значения
		}
	}()
	return out
}

func square(in <-chan int) <-chan int { // функция принимает значения из канала и в отдельной горутине отправляет квадрат каждого числа в другой канал
	out := make(chan int)
	go func() {
		defer close(out)    // после завершения цикла закрываем канал
		for n := range in { // итерируемся по каналу , после того как канал закроется выходит из цикла
			out <- n * n
		}
	}()
	return out
}

func main() {
	nums := []int{2, 4, 6, 8, 10}
	send := sender(nums...)
	out := square(send)
	for n := range out {
		fmt.Println(
			n) // в цикле выводим каждое значение из канала, после того как канал закроется выходит из цикла
	}
}
