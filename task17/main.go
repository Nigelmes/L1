// бинарный поиск из книги Грокаем Алгоритмы. При бинарном поиске каждый раз исключается половина чисел
// bigO = O(log n)
package main

import "fmt"

func binary_search(list []int, item int) int {
	low, high := 0, len(list)-1 // начальные границы слайса
	for low <= high {
		mid := (low + high) / 2 // индекс середины слайса
		guess := list[mid]      // получаем значение из середины слайса
		if guess == item {      // если значение найдено возвращаем его индекс
			return mid
		}
		if guess > item { // если значение больше искомого то ищем в левой половине слайса
			high = mid - 1
		} else {
			low = mid + 1 // // если значение меньше  искомого то ищем в правой половине слайса
		}
	}
	return -1 // если значение не найдено, возвращаем -1
}

func main() {
	arr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12} // массив должен быть отсортирован перед бинарным поиском
	fmt.Println(binary_search(arr, 5))
}
